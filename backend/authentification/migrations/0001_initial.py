# Generated by Django 4.2.5 on 2025-04-15 11:34

import authentification.validation
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User_login_Data',
            fields=[
                ('USERID', models.CharField(max_length=6, primary_key=True, serialize=False)),
                ('USERNAME', models.CharField(max_length=20, unique=True, validators=[authentification.validation.validate_no_dot])),
                ('PASSWORD', models.CharField(max_length=150, validators=[authentification.validation.validate_password])),
                ('USER_TYPE', models.CharField(choices=[('GU', 'General-User'), ('SU', 'Superuser-User'), ('AU', 'Admin-User'), ('UU', 'Athorizised-User')], default='GU', max_length=2)),
                ('EMAIL', models.EmailField(max_length=100, unique=True, verbose_name='email address')),
                ('MOBILE_NO', models.CharField(blank=True, max_length=10, null=True)),
                ('SU_APRO_STAT', models.CharField(blank=True, choices=[('APPROVED', 'User-APPROVED'), ('REJECTED', 'User-REJECTED'), ('BLOCKED', 'User-BLOCKED'), ('DELETE', 'User-DELETE'), ('INPROGRESS', 'INPROGRESS'), ('REPLACE', 'REPLACE'), ('PENDING', 'PENDING')], max_length=20, null=True)),
                ('AU_APRO_STAT', models.CharField(blank=True, choices=[('APPROVED', 'User-APPROVED'), ('REJECTED', 'User-REJECTED'), ('BLOCKED', 'User-BLOCKED'), ('DELETE', 'User-DELETE'), ('INPROGRESS', 'INPROGRESS'), ('REPLACE', 'REPLACE'), ('PENDING', 'PENDING')], max_length=20, null=True)),
                ('APRO_DATE', models.DateTimeField(null=True)),
                ('SU_APRO_REM', models.CharField(blank=True, max_length=100, null=True)),
                ('AU_APRO_REM', models.CharField(blank=True, max_length=100, null=True)),
                ('CREATION_DATE', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('ADMIN_TYPE', models.CharField(blank=True, choices=[('WCADMIN', 'WCADMIN'), ('UDADMIN', 'UDADMIN')], max_length=100, null=True)),
            ],
            options={
                'db_table': 'Login_Main_Data',
            },
        ),
        migrations.CreateModel(
            name='AuderelaTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='contact_us',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_mail', models.EmailField(blank=True, max_length=254, null=True)),
                ('customer_mobile_no', models.CharField(blank=True, max_length=20, null=True)),
                ('catagory', models.CharField(blank=True, max_length=100, null=True)),
                ('comment', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Logs_LogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(max_length=50)),
                ('message', models.TextField()),
                ('pathname', models.CharField(max_length=255)),
                ('func_name', models.CharField(max_length=255)),
                ('line_no', models.IntegerField()),
                ('exc_info', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpatialData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, unique=True)),
                ('properties', models.JSONField()),
                ('geometry', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Testclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('method', models.CharField(max_length=10)),
                ('response_status_code', models.IntegerField()),
                ('response_headers', models.JSONField()),
                ('response_body', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'HTTP Requests and Responses',
            },
        ),
        migrations.CreateModel(
            name='THEME_MODULE',
            fields=[
                ('USERID_THEME_OPT', models.CharField(max_length=6, primary_key=True, serialize=False)),
                ('THEME_TYPE', models.CharField(max_length=50, unique=True)),
                ('MODEL_1', models.CharField(max_length=50)),
                ('MODEL_2', models.CharField(max_length=50)),
                ('MODEL_3', models.CharField(max_length=50)),
                ('MODEL_4', models.CharField(max_length=50)),
                ('MODEL_5', models.CharField(max_length=50)),
                ('MODEL_6', models.CharField(max_length=50)),
                ('MODEL_7', models.CharField(max_length=50)),
                ('MODEL_8', models.CharField(max_length=50)),
                ('MODEL_9', models.CharField(max_length=50)),
                ('MODEL_10', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'THEME_MODULE',
            },
        ),
        migrations.CreateModel(
            name='UserLoginActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_IP', models.GenericIPAddressField(blank=True, null=True)),
                ('login_datetime', models.DateTimeField(auto_now=True)),
                ('login_username', models.CharField(blank=True, max_length=40, null=True)),
                ('status', models.CharField(blank=True, choices=[('S', 'Success'), ('F', 'Failed')], default='S', max_length=1, null=True)),
                ('user_agent_info', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'user_login_activity',
                'verbose_name_plural': 'user_login_activities',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Users_login_Details_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FIRST_NAME', models.CharField(max_length=20, null=True)),
                ('MIDDLE_NAME', models.CharField(blank=True, max_length=20, null=True)),
                ('LAST_NAME', models.CharField(max_length=20, null=True)),
                ('GENDER', models.CharField(blank=True, choices=[('Male', 'MALE'), ('Female', 'female'), ('Transgender', 'Transgender'), ('Other', 'other')], max_length=20, null=True)),
                ('DOB', models.DateField(null=True)),
                ('ORGANIZATION', models.CharField(max_length=100, null=True)),
                ('DESIGNATION', models.CharField(max_length=50, null=True)),
                ('ADDRESS_1', models.CharField(blank=True, max_length=100, null=True)),
                ('ADDRESS_2', models.CharField(blank=True, max_length=100, null=True)),
                ('CITY', models.CharField(max_length=50, null=True)),
                ('STATE', models.CharField(max_length=50, null=True)),
                ('COUNTRY', models.CharField(max_length=50, null=True)),
                ('PIN_CODE', models.CharField(blank=True, max_length=6, null=True)),
                ('UU_REM', models.CharField(blank=True, max_length=200, null=True)),
                ('LAN_LINE', models.CharField(blank=True, max_length=15, null=True)),
                ('ALT_EMAIL', models.EmailField(blank=True, max_length=100, null=True)),
                ('OFF_LOCA', models.CharField(blank=True, max_length=50, null=True)),
                ('USERID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='logindata', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Profile_Main_Data',
            },
        ),
        migrations.CreateModel(
            name='password_table',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forget_password_token', models.CharField(default=None, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('USERID', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MODUL_VIEW_PERMISSION',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AU_ID', models.CharField(max_length=6)),
                ('MODEL_1', models.BooleanField(blank=True, null=True)),
                ('MODEL_2', models.BooleanField(blank=True, null=True)),
                ('MODEL_3', models.BooleanField(blank=True, null=True)),
                ('MODEL_4', models.BooleanField(blank=True, null=True)),
                ('MODEL_5', models.BooleanField(blank=True, null=True)),
                ('MODEL_6', models.BooleanField(blank=True, null=True)),
                ('MODEL_7', models.BooleanField(blank=True, null=True)),
                ('MODEL_8', models.BooleanField(blank=True, null=True)),
                ('MODEL_9', models.BooleanField(blank=True, null=True)),
                ('MODEL_10', models.BooleanField(blank=True, null=True)),
                ('THEME_MODULE', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VIEW_Thims', to='authentification.theme_module')),
                ('USERID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='VIEW_PERMISSION', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'MODUL_VIEW_PERMISSION',
            },
        ),
        migrations.AddField(
            model_name='user_login_data',
            name='THEME_OPT',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='THEME_MODULE_set', to='authentification.theme_module'),
        ),
        migrations.AddField(
            model_name='user_login_data',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user_login_data',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
